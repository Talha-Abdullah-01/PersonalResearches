#include <iostream>
#include <string>
#include <cmath>
#include <bitset>
#include <ctime>

using namespace std;

	unsigned char rcon[256] =
	{0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
	0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
	0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
	0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
	0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
	0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
	0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
	0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
	0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
	0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
	0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
	0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
	0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
	0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
	0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
	0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d };

	unsigned char SBox[256] =
	{ 0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
	0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
	0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
	0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
	0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 };

	unsigned char inverseSBox[256] =
	{ 0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
	0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
	0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
	0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
	0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
	0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
	0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
	0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
	0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
	0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
	0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
	0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
	0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
	0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
	0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
	0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d };

	unsigned char galoisLookUp2[256] =
	{
			0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
			0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
			0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
			0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
			0x80,0x82,0x84,0x86,0x88,0x8a,0x8c,0x8e,0x90,0x92,0x94,0x96,0x98,0x9a,0x9c,0x9e,
			0xa0,0xa2,0xa4,0xa6,0xa8,0xaa,0xac,0xae,0xb0,0xb2,0xb4,0xb6,0xb8,0xba,0xbc,0xbe,
			0xc0,0xc2,0xc4,0xc6,0xc8,0xca,0xcc,0xce,0xd0,0xd2,0xd4,0xd6,0xd8,0xda,0xdc,0xde,
			0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xee,0xf0,0xf2,0xf4,0xf6,0xf8,0xfa,0xfc,0xfe,
			0x1b,0x19,0x1f,0x1d,0x13,0x11,0x17,0x15,0x0b,0x09,0x0f,0x0d,0x03,0x01,0x07,0x05,
			0x3b,0x39,0x3f,0x3d,0x33,0x31,0x37,0x35,0x2b,0x29,0x2f,0x2d,0x23,0x21,0x27,0x25,
			0x5b,0x59,0x5f,0x5d,0x53,0x51,0x57,0x55,0x4b,0x49,0x4f,0x4d,0x43,0x41,0x47,0x45,
			0x7b,0x79,0x7f,0x7d,0x73,0x71,0x77,0x75,0x6b,0x69,0x6f,0x6d,0x63,0x61,0x67,0x65,
			0x9b,0x99,0x9f,0x9d,0x93,0x91,0x97,0x95,0x8b,0x89,0x8f,0x8d,0x83,0x81,0x87,0x85,
			0xbb,0xb9,0xbf,0xbd,0xb3,0xb1,0xb7,0xb5,0xab,0xa9,0xaf,0xad,0xa3,0xa1,0xa7,0xa5,
			0xdb,0xd9,0xdf,0xdd,0xd3,0xd1,0xd7,0xd5,0xcb,0xc9,0xcf,0xcd,0xc3,0xc1,0xc7,0xc5,
			0xfb,0xf9,0xff,0xfd,0xf3,0xf1,0xf7,0xf5,0xeb,0xe9,0xef,0xed,0xe3,0xe1,0xe7,0xe5
	};

	 unsigned char galoisLookUp3[256] =
	{
			0x00,0x03,0x06,0x05,0x0c,0x0f,0x0a,0x09,0x18,0x1b,0x1e,0x1d,0x14,0x17,0x12,0x11,
			0x30,0x33,0x36,0x35,0x3c,0x3f,0x3a,0x39,0x28,0x2b,0x2e,0x2d,0x24,0x27,0x22,0x21,
			0x60,0x63,0x66,0x65,0x6c,0x6f,0x6a,0x69,0x78,0x7b,0x7e,0x7d,0x74,0x77,0x72,0x71,
			0x50,0x53,0x56,0x55,0x5c,0x5f,0x5a,0x59,0x48,0x4b,0x4e,0x4d,0x44,0x47,0x42,0x41,
			0xc0,0xc3,0xc6,0xc5,0xcc,0xcf,0xca,0xc9,0xd8,0xdb,0xde,0xdd,0xd4,0xd7,0xd2,0xd1,
			0xf0,0xf3,0xf6,0xf5,0xfc,0xff,0xfa,0xf9,0xe8,0xeb,0xee,0xed,0xe4,0xe7,0xe2,0xe1,
			0xa0,0xa3,0xa6,0xa5,0xac,0xaf,0xaa,0xa9,0xb8,0xbb,0xbe,0xbd,0xb4,0xb7,0xb2,0xb1,
			0x90,0x93,0x96,0x95,0x9c,0x9f,0x9a,0x99,0x88,0x8b,0x8e,0x8d,0x84,0x87,0x82,0x81,
			0x9b,0x98,0x9d,0x9e,0x97,0x94,0x91,0x92,0x83,0x80,0x85,0x86,0x8f,0x8c,0x89,0x8a,
			0xab,0xa8,0xad,0xae,0xa7,0xa4,0xa1,0xa2,0xb3,0xb0,0xb5,0xb6,0xbf,0xbc,0xb9,0xba,
			0xfb,0xf8,0xfd,0xfe,0xf7,0xf4,0xf1,0xf2,0xe3,0xe0,0xe5,0xe6,0xef,0xec,0xe9,0xea,
			0xcb,0xc8,0xcd,0xce,0xc7,0xc4,0xc1,0xc2,0xd3,0xd0,0xd5,0xd6,0xdf,0xdc,0xd9,0xda,
			0x5b,0x58,0x5d,0x5e,0x57,0x54,0x51,0x52,0x43,0x40,0x45,0x46,0x4f,0x4c,0x49,0x4a,
			0x6b,0x68,0x6d,0x6e,0x67,0x64,0x61,0x62,0x73,0x70,0x75,0x76,0x7f,0x7c,0x79,0x7a,
			0x3b,0x38,0x3d,0x3e,0x37,0x34,0x31,0x32,0x23,0x20,0x25,0x26,0x2f,0x2c,0x29,0x2a,
			0x0b,0x08,0x0d,0x0e,0x07,0x04,0x01,0x02,0x13,0x10,0x15,0x16,0x1f,0x1c,0x19,0x1a
	};

	 unsigned char galoisLookUp9[256] =
	 {
		0x00,0x09,0x12,0x1b,0x24,0x2d,0x36,0x3f,0x48,0x41,0x5a,0x53,0x6c,0x65,0x7e,0x77,
		0x90,0x99,0x82,0x8b,0xb4,0xbd,0xa6,0xaf,0xd8,0xd1,0xca,0xc3,0xfc,0xf5,0xee,0xe7,
		0x3b,0x32,0x29,0x20,0x1f,0x16,0x0d,0x04,0x73,0x7a,0x61,0x68,0x57,0x5e,0x45,0x4c,
		0xab,0xa2,0xb9,0xb0,0x8f,0x86,0x9d,0x94,0xe3,0xea,0xf1,0xf8,0xc7,0xce,0xd5,0xdc,
		0x76,0x7f,0x64,0x6d,0x52,0x5b,0x40,0x49,0x3e,0x37,0x2c,0x25,0x1a,0x13,0x08,0x01,
		0xe6,0xef,0xf4,0xfd,0xc2,0xcb,0xd0,0xd9,0xae,0xa7,0xbc,0xb5,0x8a,0x83,0x98,0x91,
		0x4d,0x44,0x5f,0x56,0x69,0x60,0x7b,0x72,0x05,0x0c,0x17,0x1e,0x21,0x28,0x33,0x3a,
		0xdd,0xd4,0xcf,0xc6,0xf9,0xf0,0xeb,0xe2,0x95,0x9c,0x87,0x8e,0xb1,0xb8,0xa3,0xaa,
		0xec,0xe5,0xfe,0xf7,0xc8,0xc1,0xda,0xd3,0xa4,0xad,0xb6,0xbf,0x80,0x89,0x92,0x9b,
		0x7c,0x75,0x6e,0x67,0x58,0x51,0x4a,0x43,0x34,0x3d,0x26,0x2f,0x10,0x19,0x02,0x0b,
		0xd7,0xde,0xc5,0xcc,0xf3,0xfa,0xe1,0xe8,0x9f,0x96,0x8d,0x84,0xbb,0xb2,0xa9,0xa0,
		0x47,0x4e,0x55,0x5c,0x63,0x6a,0x71,0x78,0x0f,0x06,0x1d,0x14,0x2b,0x22,0x39,0x30,
		0x9a,0x93,0x88,0x81,0xbe,0xb7,0xac,0xa5,0xd2,0xdb,0xc0,0xc9,0xf6,0xff,0xe4,0xed,
		0x0a,0x03,0x18,0x11,0x2e,0x27,0x3c,0x35,0x42,0x4b,0x50,0x59,0x66,0x6f,0x74,0x7d,
		0xa1,0xa8,0xb3,0xba,0x85,0x8c,0x97,0x9e,0xe9,0xe0,0xfb,0xf2,0xcd,0xc4,0xdf,0xd6,
		0x31,0x38,0x23,0x2a,0x15,0x1c,0x07,0x0e,0x79,0x70,0x6b,0x62,0x5d,0x54,0x4f,0x46
	 };

		 unsigned char galoisLookUp11[256] =
	 {
		0x00,0x0b,0x16,0x1d,0x2c,0x27,0x3a,0x31,0x58,0x53,0x4e,0x45,0x74,0x7f,0x62,0x69,
		0xb0,0xbb,0xa6,0xad,0x9c,0x97,0x8a,0x81,0xe8,0xe3,0xfe,0xf5,0xc4,0xcf,0xd2,0xd9,
		0x7b,0x70,0x6d,0x66,0x57,0x5c,0x41,0x4a,0x23,0x28,0x35,0x3e,0x0f,0x04,0x19,0x12,
		0xcb,0xc0,0xdd,0xd6,0xe7,0xec,0xf1,0xfa,0x93,0x98,0x85,0x8e,0xbf,0xb4,0xa9,0xa2,
		0xf6,0xfd,0xe0,0xeb,0xda,0xd1,0xcc,0xc7,0xae,0xa5,0xb8,0xb3,0x82,0x89,0x94,0x9f,
		0x46,0x4d,0x50,0x5b,0x6a,0x61,0x7c,0x77,0x1e,0x15,0x08,0x03,0x32,0x39,0x24,0x2f,
		0x8d,0x86,0x9b,0x90,0xa1,0xaa,0xb7,0xbc,0xd5,0xde,0xc3,0xc8,0xf9,0xf2,0xef,0xe4,
		0x3d,0x36,0x2b,0x20,0x11,0x1a,0x07,0x0c,0x65,0x6e,0x73,0x78,0x49,0x42,0x5f,0x54,
		0xf7,0xfc,0xe1,0xea,0xdb,0xd0,0xcd,0xc6,0xaf,0xa4,0xb9,0xb2,0x83,0x88,0x95,0x9e,
		0x47,0x4c,0x51,0x5a,0x6b,0x60,0x7d,0x76,0x1f,0x14,0x09,0x02,0x33,0x38,0x25,0x2e,
		0x8c,0x87,0x9a,0x91,0xa0,0xab,0xb6,0xbd,0xd4,0xdf,0xc2,0xc9,0xf8,0xf3,0xee,0xe5,
		0x3c,0x37,0x2a,0x21,0x10,0x1b,0x06,0x0d,0x64,0x6f,0x72,0x79,0x48,0x43,0x5e,0x55,
		0x01,0x0a,0x17,0x1c,0x2d,0x26,0x3b,0x30,0x59,0x52,0x4f,0x44,0x75,0x7e,0x63,0x68,
		0xb1,0xba,0xa7,0xac,0x9d,0x96,0x8b,0x80,0xe9,0xe2,0xff,0xf4,0xc5,0xce,0xd3,0xd8,
		0x7a,0x71,0x6c,0x67,0x56,0x5d,0x40,0x4b,0x22,0x29,0x34,0x3f,0x0e,0x05,0x18,0x13,
		0xca,0xc1,0xdc,0xd7,0xe6,0xed,0xf0,0xfb,0x92,0x99,0x84,0x8f,0xbe,0xb5,0xa8,0xa3
	 };

		 unsigned char galoisLookUp13[256] =
		 {
			0x00,0x0d,0x1a,0x17,0x34,0x39,0x2e,0x23,0x68,0x65,0x72,0x7f,0x5c,0x51,0x46,0x4b,
			0xd0,0xdd,0xca,0xc7,0xe4,0xe9,0xfe,0xf3,0xb8,0xb5,0xa2,0xaf,0x8c,0x81,0x96,0x9b,
			0xbb,0xb6,0xa1,0xac,0x8f,0x82,0x95,0x98,0xd3,0xde,0xc9,0xc4,0xe7,0xea,0xfd,0xf0,
			0x6b,0x66,0x71,0x7c,0x5f,0x52,0x45,0x48,0x03,0x0e,0x19,0x14,0x37,0x3a,0x2d,0x20,
			0x6d,0x60,0x77,0x7a,0x59,0x54,0x43,0x4e,0x05,0x08,0x1f,0x12,0x31,0x3c,0x2b,0x26,
			0xbd,0xb0,0xa7,0xaa,0x89,0x84,0x93,0x9e,0xd5,0xd8,0xcf,0xc2,0xe1,0xec,0xfb,0xf6,
			0xd6,0xdb,0xcc,0xc1,0xe2,0xef,0xf8,0xf5,0xbe,0xb3,0xa4,0xa9,0x8a,0x87,0x90,0x9d,
			0x06,0x0b,0x1c,0x11,0x32,0x3f,0x28,0x25,0x6e,0x63,0x74,0x79,0x5a,0x57,0x40,0x4d,
			0xda,0xd7,0xc0,0xcd,0xee,0xe3,0xf4,0xf9,0xb2,0xbf,0xa8,0xa5,0x86,0x8b,0x9c,0x91,
			0x0a,0x07,0x10,0x1d,0x3e,0x33,0x24,0x29,0x62,0x6f,0x78,0x75,0x56,0x5b,0x4c,0x41,
			0x61,0x6c,0x7b,0x76,0x55,0x58,0x4f,0x42,0x09,0x04,0x13,0x1e,0x3d,0x30,0x27,0x2a,
			0xb1,0xbc,0xab,0xa6,0x85,0x88,0x9f,0x92,0xd9,0xd4,0xc3,0xce,0xed,0xe0,0xf7,0xfa,
			0xb7,0xba,0xad,0xa0,0x83,0x8e,0x99,0x94,0xdf,0xd2,0xc5,0xc8,0xeb,0xe6,0xf1,0xfc,
			0x67,0x6a,0x7d,0x70,0x53,0x5e,0x49,0x44,0x0f,0x02,0x15,0x18,0x3b,0x36,0x21,0x2c,
			0x0c,0x01,0x16,0x1b,0x38,0x35,0x22,0x2f,0x64,0x69,0x7e,0x73,0x50,0x5d,0x4a,0x47,
			0xdc,0xd1,0xc6,0xcb,0xe8,0xe5,0xf2,0xff,0xb4,0xb9,0xae,0xa3,0x80,0x8d,0x9a,0x97
		 };

		 unsigned char galoisLookUp14[256] =
		 {
			0x00,0x0e,0x1c,0x12,0x38,0x36,0x24,0x2a,0x70,0x7e,0x6c,0x62,0x48,0x46,0x54,0x5a,
			0xe0,0xee,0xfc,0xf2,0xd8,0xd6,0xc4,0xca,0x90,0x9e,0x8c,0x82,0xa8,0xa6,0xb4,0xba,
			0xdb,0xd5,0xc7,0xc9,0xe3,0xed,0xff,0xf1,0xab,0xa5,0xb7,0xb9,0x93,0x9d,0x8f,0x81,
			0x3b,0x35,0x27,0x29,0x03,0x0d,0x1f,0x11,0x4b,0x45,0x57,0x59,0x73,0x7d,0x6f,0x61,
			0xad,0xa3,0xb1,0xbf,0x95,0x9b,0x89,0x87,0xdd,0xd3,0xc1,0xcf,0xe5,0xeb,0xf9,0xf7,
			0x4d,0x43,0x51,0x5f,0x75,0x7b,0x69,0x67,0x3d,0x33,0x21,0x2f,0x05,0x0b,0x19,0x17,
			0x76,0x78,0x6a,0x64,0x4e,0x40,0x52,0x5c,0x06,0x08,0x1a,0x14,0x3e,0x30,0x22,0x2c,
			0x96,0x98,0x8a,0x84,0xae,0xa0,0xb2,0xbc,0xe6,0xe8,0xfa,0xf4,0xde,0xd0,0xc2,0xcc,
			0x41,0x4f,0x5d,0x53,0x79,0x77,0x65,0x6b,0x31,0x3f,0x2d,0x23,0x09,0x07,0x15,0x1b,
			0xa1,0xaf,0xbd,0xb3,0x99,0x97,0x85,0x8b,0xd1,0xdf,0xcd,0xc3,0xe9,0xe7,0xf5,0xfb,
			0x9a,0x94,0x86,0x88,0xa2,0xac,0xbe,0xb0,0xea,0xe4,0xf6,0xf8,0xd2,0xdc,0xce,0xc0,
			0x7a,0x74,0x66,0x68,0x42,0x4c,0x5e,0x50,0x0a,0x04,0x16,0x18,0x32,0x3c,0x2e,0x20,
			0xec,0xe2,0xf0,0xfe,0xd4,0xda,0xc8,0xc6,0x9c,0x92,0x80,0x8e,0xa4,0xaa,0xb8,0xb6,
			0x0c,0x02,0x10,0x1e,0x34,0x3a,0x28,0x26,0x7c,0x72,0x60,0x6e,0x44,0x4a,0x58,0x56,
			0x37,0x39,0x2b,0x25,0x0f,0x01,0x13,0x1d,0x47,0x49,0x5b,0x55,0x7f,0x71,0x63,0x6d,
			0xd7,0xd9,0xcb,0xc5,0xef,0xe1,0xf3,0xfd,0xa7,0xa9,0xbb,0xb5,0x9f,0x91,0x83,0x8d
		 };


		 string round_keys[16];   // for later use primarily for decrypting the message
		 string plainText;

	 void PrintHex(unsigned char x) {
		 if (x / 16 < 10)
			 cout << (char)((x / 16) + '0');
		 if (x / 16 >= 10)
			 cout << (char)((x / 16 - 10) + 'A');

		 if (x % 16 < 10)
			 cout << (char)((x % 16) + '0');
		 if (x % 16 >= 10)
			 cout << (char)((x % 16 - 10) + 'A');
	 }

	 void keyExpansionCore(unsigned char* in, unsigned char i) {
		 
		 unsigned int* q = (unsigned int*)in;
		 *q = (*q >> 8) | ((*q & 0xff) << 24);

		 in[0] = SBox[in[0]];
		 in[1] = SBox[in[1]];
		 in[2] = SBox[in[2]];
		 in[3] = SBox[in[3]];

		 in[0] ^= rcon[i];
	 }

	void shiftRows(int subByteArray[]) {
		int temp[16];

		temp[0] = subByteArray[0];
		temp[1] = subByteArray[5];
		temp[2] = subByteArray[10];
		temp[3] = subByteArray[15];

		temp[4] = subByteArray[4];
		temp[5] = subByteArray[9];
		temp[6] = subByteArray[14];
		temp[7] = subByteArray[3];

		temp[8] = subByteArray[8];
		temp[9] = subByteArray[13];
		temp[10] = subByteArray[2];
		temp[11] = subByteArray[7];

		temp[12] = subByteArray[12];
		temp[13] = subByteArray[1];
		temp[14] = subByteArray[6];
		temp[15] = subByteArray[11];

		for (int i = 0; i < 16; i++)
			subByteArray[i] = temp[i];
	}

	 void keyExpansion(unsigned char* inputKey, unsigned char* expandedKeys) {
		for (int i = 0; i < 16; i++)
			expandedKeys[i] = inputKey[i];

		int noOfBytesGenerated = 16;
		int rconIteration = 1;
		unsigned char temp[4];

		while (noOfBytesGenerated < 176) {
			for (int i = 0; i < 4; i++)
				temp[i] = expandedKeys[i + noOfBytesGenerated - 4];
			//for each 16 bytes
			if (noOfBytesGenerated % 16 == 0) {
				keyExpansionCore(temp, rconIteration);
				rconIteration++;
			}

			for (unsigned char a = 0; a < 4; a++) {
				expandedKeys[noOfBytesGenerated] = expandedKeys[noOfBytesGenerated - 16] ^ temp[a];
				noOfBytesGenerated++;
			}
		}
	}

	 void subBytes(unsigned char* state) {
		for (int i = 0; i < 16; i++)
			state[i] = SBox[state[i]];
	}

	 void shiftRows(unsigned char* state) {
		unsigned char temp[16];

		temp[0] = state[0];
		temp[1] = state[5];
		temp[2] = state[10];
		temp[3] = state[15];

		temp[4] = state[4];
		temp[5] = state[9];
		temp[6] = state[14];
		temp[7] = state[3];

		temp[8] = state[8];
		temp[9] = state[13];
		temp[10] = state[2];
		temp[11] = state[7];

		temp[12] = state[12];
		temp[13] = state[1];
		temp[14] = state[6];
		temp[15] = state[11];

		for (int i = 0; i < 16; i++)
			state[i] = temp[i];
	}

	 void mixColumns(unsigned char* state) {
		 unsigned char tempVector[16];

		tempVector[0] = (unsigned char)(galoisLookUp2[state[0]] ^ galoisLookUp3[state[1]] ^ state[2] ^ state[3]);
		tempVector[1] = (unsigned char)(state[0] ^ galoisLookUp2[state[1]] ^ galoisLookUp3[state[2]] ^ state[3]);
		tempVector[2] = (unsigned char)(state[0] ^ state[1] ^ galoisLookUp2[state[2]] ^ galoisLookUp3[state[3]]);
		tempVector[3] = (unsigned char)(galoisLookUp3[state[0]] ^ state[1] ^ state[2] ^ galoisLookUp2[state[3]]);

		tempVector[4] = (unsigned char)(galoisLookUp2[state[4]] ^ galoisLookUp3[state[5]] ^ state[6] ^ state[7]);
		tempVector[5] = (unsigned char)(state[4] ^ galoisLookUp2[state[5]] ^ galoisLookUp3[state[6]] ^ state[7]);
		tempVector[6] = (unsigned char)(state[4] ^ state[5] ^ galoisLookUp2[state[6]] ^ galoisLookUp3[state[7]]);
		tempVector[7] = (unsigned char)(galoisLookUp3[state[4]] ^ state[5] ^ state[6] ^ galoisLookUp2[state[7]]);

		tempVector[8] = (unsigned char)(galoisLookUp2[state[8]] ^ galoisLookUp3[state[9]] ^ state[10] ^ state[11]);
		tempVector[9] = (unsigned char)(state[8] ^ galoisLookUp2[state[9]] ^ galoisLookUp3[state[10]] ^ state[11]);
		tempVector[10] = (unsigned char)(state[8] ^ state[9] ^ galoisLookUp2[state[10]] ^ galoisLookUp3[state[11]]);
		tempVector[11] = (unsigned char)(galoisLookUp3[state[8]] ^ state[9] ^ state[10] ^ galoisLookUp2[state[11]]);

		tempVector[12] = (unsigned char)(galoisLookUp2[state[12]] ^ galoisLookUp3[state[13]] ^ state[14] ^ state[15]);
		tempVector[13] = (unsigned char)(state[12] ^ galoisLookUp2[state[13]] ^ galoisLookUp3[state[14]] ^ state[15]);
		tempVector[14] = (unsigned char)(state[12] ^ state[13] ^ galoisLookUp2[state[14]] ^ galoisLookUp3[state[15]]);
		tempVector[15] = (unsigned char)(galoisLookUp3[state[12]] ^ state[13] ^ state[14] ^ galoisLookUp2[state[15]]);

		for (int i = 0; i < 16; i++)
			state[i] = tempVector[i];
	}

	 void addRoundKey(unsigned char* state, unsigned char* roundKey) {
		for (int i=0; i < 16; i++)
			state[i] ^= roundKey[i];
	}

	  void AES_Encrypt(unsigned char* message, unsigned char* key, unsigned char* expandedKey) {
		  unsigned char userMessage[16];
		for (int i = 0; i < 16; i++)
			userMessage[i] = message[i];

		int numberOfRounds = 9;
		keyExpansion(key, expandedKey);
		addRoundKey(userMessage, key);
		for (int i = 0; i < numberOfRounds; i++) {
			subBytes(userMessage);
			shiftRows(userMessage);
			mixColumns(userMessage);
			addRoundKey(userMessage, expandedKey + (16*(i+1)));
		}
		subBytes(userMessage);
		shiftRows(userMessage);
		addRoundKey(userMessage, expandedKey + 160);

		for (int i = 0; i < 16; i++)
			message[i] = userMessage[i];
	}

	  void invShiftRows(unsigned char* state) {
		  unsigned char temp[16];

		  temp[0] = state[0];
		  temp[1] = state[13];
		  temp[2] = state[10];
		  temp[3] = state[7];

		  temp[4] = state[4];
		  temp[5] = state[1];
		  temp[6] = state[14];
		  temp[7] = state[11];

		  temp[8] = state[8];
		  temp[9] = state[5];
		  temp[10] = state[2];
		  temp[11] = state[15];

		  temp[12] = state[12];
		  temp[13] = state[9];
		  temp[14] = state[6];
		  temp[15] = state[3];

		  for (int i = 0; i < 16; i++)
			  state[i] = temp[i];
	  }

	  void invMixColumns(unsigned char* state) {
		  unsigned char tempVector[16];

		  tempVector[0] = (unsigned char)(galoisLookUp14[state[0]] ^ galoisLookUp11[state[1]] ^ galoisLookUp13[state[2]] ^ galoisLookUp9[state[3]]);
		  tempVector[1] = (unsigned char)(galoisLookUp9[state[0]] ^ galoisLookUp14[state[1]] ^ galoisLookUp11[state[2]] ^ galoisLookUp13[state[3]]);
		  tempVector[2] = (unsigned char)(galoisLookUp13[state[0]] ^ galoisLookUp9[state[1]] ^ galoisLookUp14[state[2]] ^ galoisLookUp11[state[3]]);
		  tempVector[3] = (unsigned char)(galoisLookUp11[state[0]] ^ galoisLookUp13[state[1]] ^ galoisLookUp9[state[2]] ^ galoisLookUp14[state[3]]);

		  tempVector[4] = (unsigned char)(galoisLookUp14[state[4]] ^ galoisLookUp11[state[5]] ^ galoisLookUp13[state[6]] ^ galoisLookUp9[state[7]]);
		  tempVector[5] = (unsigned char)(galoisLookUp9[state[4]] ^ galoisLookUp14[state[5]] ^ galoisLookUp11[state[6]] ^ galoisLookUp13[state[7]]);
		  tempVector[6] = (unsigned char)(galoisLookUp13[state[4]] ^ galoisLookUp9[state[5]] ^ galoisLookUp14[state[6]] ^ galoisLookUp11[state[7]]);
		  tempVector[7] = (unsigned char)(galoisLookUp11[state[4]] ^ galoisLookUp13[state[5]] ^ galoisLookUp9[state[6]] ^ galoisLookUp14[state[7]]);

		  tempVector[8] = (unsigned char)(galoisLookUp14[state[8]] ^ galoisLookUp11[state[9]] ^ galoisLookUp13[state[10]] ^ galoisLookUp9[state[11]]);
		  tempVector[9] = (unsigned char)(galoisLookUp9[state[8]] ^ galoisLookUp14[state[9]] ^ galoisLookUp11[state[10]] ^ galoisLookUp13[state[11]]);
		  tempVector[10] = (unsigned char)(galoisLookUp13[state[8]] ^ galoisLookUp9[state[9]] ^ galoisLookUp14[state[10]] ^ galoisLookUp11[state[11]]);
		  tempVector[11] = (unsigned char)(galoisLookUp11[state[8]] ^ galoisLookUp13[state[9]] ^ galoisLookUp9[state[10]] ^ galoisLookUp14[state[11]]);

		  tempVector[12] = (unsigned char)(galoisLookUp14[state[12]] ^ galoisLookUp11[state[13]] ^ galoisLookUp13[state[14]] ^ galoisLookUp9[state[15]]);
		  tempVector[13] = (unsigned char)(galoisLookUp9[state[12]] ^ galoisLookUp14[state[13]] ^ galoisLookUp11[state[14]] ^ galoisLookUp13[state[15]]);
		  tempVector[14] = (unsigned char)(galoisLookUp13[state[12]] ^ galoisLookUp9[state[13]] ^ galoisLookUp14[state[14]] ^ galoisLookUp11[state[15]]);
		  tempVector[15] = (unsigned char)(galoisLookUp11[state[12]] ^ galoisLookUp13[state[13]] ^ galoisLookUp9[state[14]] ^ galoisLookUp14[state[15]]);

		  for (int i = 0; i < 16; i++)
			  state[i] = tempVector[i];
	  }

	  void invSubBytes(unsigned char* state) {
		  for (int i = 0; i < 16; i++)
			  state[i] = inverseSBox[state[i]];
	  }

	  void AES_Decrypt(unsigned char* expandedKey, unsigned char* encryptedMessage, unsigned char* decryptedMessage) {
		  unsigned char state[16];
		  for (int i = 0; i < 16; i++)
			  state[i] = encryptedMessage[i];
		  addRoundKey(state, expandedKey + (160));
		  invShiftRows(state);
		  invSubBytes(state);

		  for (int i = 9; i > 0; i--) 
		  {
			  addRoundKey(state, expandedKey + (16 * (i)));
			  invMixColumns(state);
			  invShiftRows(state);
			  invSubBytes(state);
		  }
		  addRoundKey(state, expandedKey);

		  for (int i = 0; i < 16; i++)
			  decryptedMessage[i] = state[i];
	  }

	  int main() {
		  int choice = 0;
		//  cout << "Enter one of the following choices:\n1. AES MODE\n2. DES MODE\nYour Choice: ";
		//  cin >> choice;
		//  cout << endl << endl;
		//  if (choice == 1)
		 // {
		  unsigned char message[] = "Omar, omar123";
		  unsigned char key[16] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 , 15, 16}; //test key
		  unsigned char expandedKey[176];

		  int messageLength = strlen((const char*)message);
		  int lengthOfPaddedMessage = messageLength;
		  if (lengthOfPaddedMessage % 16 != 0)
			  lengthOfPaddedMessage = (lengthOfPaddedMessage / 16 + 1) * 16;
		  unsigned char* paddedMessage = new unsigned char[lengthOfPaddedMessage];

		  for (int i = 0; i < lengthOfPaddedMessage; i++) {
			  if (i >= messageLength)
				  paddedMessage[i] = 0;
			  else
				  paddedMessage[i] = message[i];
		  }
		  for (int i = 0; i < lengthOfPaddedMessage; i += 16) {
			  AES_Encrypt(paddedMessage + i, key, expandedKey);
		  }
		  cout << "Plain Text: ";

		  for (int i = 0; i < strlen((const char*)message); i++)
			  cout << message[i];
		  cout << "\n\n";
		  cout << "\n Encrypted Message: " << endl << endl;
		  for (int i = 0; i < lengthOfPaddedMessage; i++) {
			  PrintHex(paddedMessage[i]);
			  cout << " ";
		  }
		  cout << endl << endl;

		  int paddedMessageLength = strlen((const char*)paddedMessage);
		  unsigned char* decryptedMessage = new unsigned char[paddedMessageLength];
		  for (int i = 0; i < paddedMessageLength; i += 16) {
			  AES_Decrypt(expandedKey, paddedMessage + i, decryptedMessage + i);
		  }

		  cout << endl;
		  cout << "Decrypted message: " << endl << endl;
		  for (int i = 0; i < messageLength; i++) {
			  cout << decryptedMessage[i];
		  }
		  delete[] paddedMessage;
		  cout << endl << endl;

		  cout << "\n\n";
		  return 0;
	  }
	  